#!/usr/bin/python3
"""
stodgymd - tool for analyzing multicast market data from pcap files.
It uses scapy (https://scapy.net).
"""
import time

start = time.perf_counter()

from scapy.all import PcapReader
import scapy.packet
import struct
from datetime import datetime
import sys
import argparse
import concurrent.futures


def main():
    class MiniStat:
        """Used for time delta statistics data"""

        def __init__(self):
            self.stat = {}
            self.stat['delta_min'] = {'delta': 0, 'src_time': 0, 'pcap_time': 0,
                                      'seq_num': 0, 'pkt_num': 0}
            self.stat['delta_max'] = {'delta': 0, 'src_time': 0, 'pcap_time': 0,
                                      'seq_num': 0, 'pkt_num': 0}
            self.stat['delta_avg'] = {'delta': 0}
            self.stat['pcap'] = {'packets': 0}

        def set_delta(self, delta_type: str, delta: int, src_time: int = None,
                      pcap_time: int = None, seq_num: int = None, pkt_num: int = None
                      ) -> None:
            if delta_type in self.stat:
                if delta_type in ('delta_min', 'delta_max'):
                    self.stat[delta_type]['delta'] = delta
                    self.stat[delta_type]['src_time'] = src_time
                    self.stat[delta_type]['pcap_time'] = pcap_time
                    self.stat[delta_type]['seq_num'] = seq_num
                    self.stat[delta_type]['pkt_num'] = pkt_num
                elif delta_type == 'delta_avg':
                    self.stat[delta_type]['delta'] = delta

        def __str__(self):
            delta_min = self.stat['delta_min']
            delta_max = self.stat['delta_max']
            delta_avg = self.stat['delta_avg']
            delta_min_src_time = str(datetime.fromtimestamp(
                delta_min['src_time'] / 1e9))
            delta_max_src_time = str(datetime.fromtimestamp(
                delta_max['src_time'] / 1e9))
            delta_min_pcap_time = str(datetime.fromtimestamp(
                float(delta_min['pcap_time'])))
            delta_max_pcap_time = str(datetime.fromtimestamp(
                float(delta_max['pcap_time'])))
            result = f"{'delta(us)':>14} {'src_time':<28} {'pcap_time':<28} " \
                     f"{'msgseqnum':>20} {'pkt_num':>9}\n" \
                     f"min: {delta_min['delta']:>9} " \
                     f"{delta_min_src_time:<28} {delta_min_pcap_time:<28} " \
                     f"{delta_min['seq_num']:>20} {delta_min['pkt_num']:>9}\n" \
                     f"max: {delta_max['delta']:>9} " \
                     f"{delta_max_src_time:<28} {delta_max_pcap_time:<28} " \
                     f"{delta_max['seq_num']:>20} {delta_max['pkt_num']:>9}\n" \
                     f"avg: {delta_avg['delta']:>9.0f}"
            return result

    class Params:
        """Arguments processing"""

        def __init__(self):
            # Parse and fill arguments
            self._args = self.parse_options()
            #print(vars(self._args))
            self.count = self._args.count  # -c
            # -f/--format format
            if self._args.format == 'sb':  # SPBExchange Binary
                self.data_format = 0
                self.time_delta = self._args.time_delta  # -t
            elif self._args.format == 'p4':  # MsgSeqNum: Preamble 4 bytes
                self.data_format = 1
                # We can't decode source time for FAST for now
                if self._args.time_delta:
                    print(f'INF: Option -t will be omitted')
                self.time_delta = False
            elif self._args.format == 'p8':  # MsgSeqNum: Preamble 8 bytes
                self.data_format = 2
                # We can't decode source time for FAST for now
                if self._args.time_delta:
                    print(f'INF: Option -t will be omitted')
                self.time_delta = False
            self.time_perf = self._args.time_perf  # -d
            self.print = not self._args.p  # -p
            self.seq_analysis = self._args.s  # -s
            self.infile = self._args.infile  # infile
            # -w:  write_file specified, but it can be empty
            if isinstance(self._args.write_file, list):
                self.write_file = True
                if len(self._args.write_file) > 0:
                    self.outfile = self._args.write_file
                else:
                    self.outfile = self.make_outfile_list()
            else:
                self.write_file = False
                self.outfile = None

        def parse_options(self):
            """Parse CLI arguments provided at program start"""
            arg_parser = argparse.ArgumentParser(
                prog="stodgy",
                usage="%(prog)s [options] -f format infile",
                add_help=True,
                description="Multicast market data pcap files analyzer ")
            arg_parser.version = "0.1"
            arg_parser.add_argument("--version", action="version")
            arg_parser.add_argument("-c", "--count", metavar="count",
                                    action="store", type=int, required=False,
                                    help="Number of frames/packets "
                                         "to process from the beginning of infile.")
            arg_parser.add_argument("-f", "--format", metavar="format",
                                    action="store", type=str, required=True,
                                    help="Data format to decode MsgSeqNum: "
                                         "p4 - FAST with a 4-bytes MsgSeqNum "
                                         "added before every FAST-message; "
                                         "p8 - FAST with an 8-bytes MsgSeqNum "
                                         "added before every FAST-message; "
                                         "sb - SPBExchange MD Binary")
            arg_parser.add_argument("-w", "--write-file", metavar="outfile",
                                    action="store", type=str, required=False,
                                    nargs="*",
                                    help="Write to file instead of stdout. "
                                         "Txt extension will be added to the "
                                         "infile file name, if no outfile given.")
            arg_parser.add_argument("-t", "--time-delta", action="store_true",
                                    required=False,
                                    help="Calculate time difference between "
                                         "multicast source timestamp and pcap "
                                         "written timestamp.")
            arg_parser.add_argument("-p", action="store_true", required=False,
                                    help="Don't print every packet info line "
                                         "by line")
            arg_parser.add_argument("-s", action="store_true", required=False,
                                    help="Do seq_num check for gaps, reorder, "
                                         "duplication.")
            arg_parser.add_argument("-d", "--time-perf", action="store_true",
                                    required=False,
                                    help="You don't need this.")
            arg_parser.add_argument("infile", metavar="infile", type=str,
                                    nargs="+", help="pcap file to read.")
            return arg_parser.parse_args()

        def make_outfile_list(self):
            # -w:  write_file specified, but it can be empty
            if isinstance(self._args.write_file, list) \
                    and not self._args.write_file:
                # -w set, but none infile given
                file_list = []
                for i in self.infile:
                    file_list.append(i.rstrip('.pcap') + '.txt')
            return file_list

    def parse_pcap(opt_data_format: str, opt_infile: str, opt_count: int,
                   opt_time_perf: bool, opt_print: bool, opt_time_delta: bool,
                   opt_seq_analysis: bool, opt_write_file: bool = False,
                   opt_outfile: list = None) -> None:
        """Processes pcap file frame by frame"""
        if opt_write_file:
            try:
                sys.stdout = open(opt_outfile, 'w')
            except Exception as e:
                print(e)
                return
        # Unpacking UDP data
        # < little-endian
        # h short     2 bytes
        # i int       4 bytes
        # q long long 8 bytes
        if not opt_data_format:  # SPBExchange MD Binary
            data_struct = struct.Struct("<hhqq")
            size, msgid = None, None
        elif opt_data_format == 1:  # Preamble 4 bytes: MOEX FAST
            data_struct = struct.Struct("<i")
        elif opt_data_format == 2:  # Preamble 8 bytes: SPBExchange FAST
            data_struct = struct.Struct("<q")
        seq_num = None

        ip, udp, data = None, None, None
        src_ip, dst_ip, dport = None, None, None
        if opt_time_delta:
            delta_max = delta_min = delta_avg = delta_sum = delta = 0
        if opt_time_perf:
            ts_pkt_start = ts_pkt_end = ts_pkt_1 = ts_pkt_2 = ts_pkt_3 = \
                ts_pkt_4 = ts_pkt_5 = 0
            time_read = 0
        if opt_print:
            output_line = f"{'pkt_no':<12} "
            if not opt_data_format:
                output_line += f"{'src_time':<28} "
            output_line += f"{'pcap_time':<28} "
            if opt_time_delta:
                output_line += f"{'delta(us)':>9} "
            output_line += f"{'src':<15} {'dst':<15} {'dport':<5} " \
                           f"{'msgseqnum':>20} "

            print(output_line)
        if opt_seq_analysis:
            from collections import deque
            flow_num = deque(maxlen=100)  # seq_num caching
            flow_status = deque(maxlen=100)  # pkt count for seq_num
            recv = expt = 0
            lost = dups = reorder = dups_reorder = 0

        with scapy.utils.PcapReader(opt_infile) as f:
            if opt_time_delta:
                stat = MiniStat()
            # count - counter for frames in pcap file
            for count, pkt in enumerate(f, 1):
                if opt_time_perf:
                    ts_pkt_start = time.perf_counter_ns()
                    time_read = ts_pkt_start - ts_pkt_end
                if opt_count and count > opt_count:
                    count -= 1
                    break
                ip = pkt.getlayer('IP')
                if ip:
                    udp = ip.getlayer('UDP')
                else:
                    if opt_time_perf:
                        ts_pkt_end = time.perf_counter_ns()
                    continue
                if udp:
                    if opt_time_perf:
                        # check_udp: {ts_pkt_udp - ts_pkt_start}
                        ts_pkt_udp = time.perf_counter_ns()
                    src_ip, dst_ip = ip.src, ip.dst
                    dport = udp.dport
                    data = udp.load
                    if not opt_data_format:
                        if len(data) >= 20:
                            size, msgid, seq_num, src_time_raw = \
                                data_struct.unpack_from(data[:20])
                            # src_time_raw: int 1658417660589225626
                    elif opt_data_format == 1:
                        seq_num, = data_struct.unpack_from(data[:4])
                    elif opt_data_format == 2:
                        seq_num, = data_struct.unpack_from(data[:8])
                    else:
                        size = msgid = seq_num = src_time_raw = src_time = 0
                    if opt_time_perf:
                        # data_extracted: ts_pkt_1 - ts_pkt_udp
                        ts_pkt_1 = time.perf_counter_ns()
                    if opt_seq_analysis:  # Do seq_num analysis
                        if seq_num == expt:  # Everything seems OK
                            flow_num.append(seq_num)
                            flow_status.append(1)
                            recv = seq_num
                            expt = recv + 1
                        elif seq_num < expt:
                            try:
                                idx = flow_num.index(seq_num)
                                if flow_status[idx]:  # 1+: already received
                                    dups += 1
                                    flow_status[idx] += 1
                                    print(f'WARN: pkt {count} msgseqnum {seq_num} duplicated')
                                else:  # 0: Not received. It's out of order
                                    reorder += 1
                                    flow_status[idx] += 1
                                    if lost:
                                        lost -= 1
                                    print(f'WARN: pkt {count} msgseqnum {seq_num} out-of-order')
                            except:  # Not found. It's duplicated or reordered
                                dups_reorder += 1
                                print(f'WARN: pkt {count} msgseqnum {seq_num} duplicated or '
                                      f'out-of-order')
                        else:  # seq_num > expt
                            # Pkt from future or we lost some packets
                            if expt:  # Expected != 0:
                                # Not at the beginning of pcap processing
                                n = seq_num - recv - 1  # Q-ty of lost packets
                                lost += n
                                if n < 100:
                                    for i in range(expt, seq_num):
                                        flow_num.append(i)
                                        flow_status.append(0)
                                print(f'WARN: pkt {count} msgseqnum {seq_num} received, {expt} '
                                      f'expected, lost {n}')
                            flow_num.append(seq_num)
                            flow_status.append(1)
                            recv = seq_num
                            expt = recv + 1
                    if opt_time_delta:
                        # Time delta calculations in usec
                        # (s * 1e9 - ns) / 1e3 = us
                        delta = round((pkt.time * 1e9 - src_time_raw) / 1e3)
                        if opt_time_perf:
                            # delta_calculated: ts_pkt_2 - ts_pkt_1
                            ts_pkt_2 = time.perf_counter_ns()
                        if count == 1:
                            stat.set_delta(delta_type='delta_min', delta=delta,
                                           src_time=src_time_raw,
                                           pcap_time=pkt.time, seq_num=seq_num,
                                           pkt_num=count)
                            stat.set_delta(delta_type='delta_max', delta=delta,
                                           src_time=src_time_raw,
                                           pcap_time=pkt.time, seq_num=seq_num,
                                           pkt_num=count)
                        else:
                            if delta < delta_min:
                                delta_min = delta
                                stat.set_delta(delta_type='delta_min',
                                               delta=delta_min,
                                               src_time=src_time_raw,
                                               pcap_time=pkt.time,
                                               seq_num=seq_num, pkt_num=count)
                            if delta > delta_max:
                                delta_max = delta
                                stat.set_delta(delta_type='delta_max',
                                               delta=delta_max,
                                               src_time=src_time_raw,
                                               pcap_time=pkt.time,
                                               seq_num=seq_num, pkt_num=count)
                        if opt_time_perf:
                            # stat: ts_pkt_3 - ts_pkt_2
                            ts_pkt_3 = time.perf_counter_ns()
                        delta_avg = ((count - 1) / count) * delta_avg + abs(delta) / count
                        if opt_time_perf:
                            # delta_avg: ts_pkt_4 - ts_pkt_3
                            ts_pkt_4 = time.perf_counter_ns()
                    # Printing
                    if opt_print:
                        try:
                            pcap_time_str = str(datetime.fromtimestamp(
                                float(pkt.time)))
                        except Exception as e:
                            pcap_time_str = ''
                            print(f'FAIL: Failed to get pcap timestamp: {e}')
                        if not opt_data_format:
                            try:
                                src_time_str = str(datetime.fromtimestamp(
                                    src_time_raw / 1e9))
                            except Exception as e:
                                src_time_str = ''
                                print(f'FAIL: Failed to get MD source timestamp: {e}')
                        output_line = f"{count:<12} "
                        if not opt_data_format:
                            output_line += f"{src_time_str:<28} "
                        output_line += f"{pcap_time_str:<28} "
                        if opt_time_delta:
                            output_line += f"{delta:>9} "
                        output_line += f"{src_ip:<15} {dst_ip:<15} " \
                                       f"{dport:<5} " \
                                       f"{seq_num:>20}"

                        print(output_line)
                        if opt_time_perf:
                            # printed ts_pkt_5 - ts_pkt_4
                            ts_pkt_5 = time.perf_counter_ns()
                else:
                    if opt_time_perf:
                        ts_pkt_end = time.perf_counter_ns()
                    continue

                if opt_time_perf:
                    ts_pkt_end = time.perf_counter_ns()
                    output_line = f'pkt: {count}' \
                                  f' read(ns): {time_read}' \
                                  f' pkt_proc: {ts_pkt_end - ts_pkt_start}' \
                                  f' check_udp: {ts_pkt_udp - ts_pkt_start}' \
                                  f' data_unpack: {ts_pkt_1 - ts_pkt_udp}' \
                                  f' delta_calc: {ts_pkt_2 - ts_pkt_1}' \
                                  f' stat_saved: {ts_pkt_3 - ts_pkt_2}' \
                                  f' delta_avg: {ts_pkt_4 - ts_pkt_3}'
                    if opt_print:
                        output_line += f' print: {ts_pkt_5 - ts_pkt_4}'
                    print(output_line)

            output_line = f'Filename: {infile}\n'
            if opt_time_delta:
                stat.set_delta(delta_type='delta_avg', delta=delta_avg)
                output_line += f'Time delta:\n{stat}\n'
            if opt_seq_analysis:
                output_line += f"\nMsgSeqNum analysis:\n" \
                    f"{'Lost:':<27} {lost}\n" \
                    f"{'Duplicated:':<27} {dups}\n" \
                    f"{'Out-of-order:':<27} {reorder}\n" \
                    f"{'Duplicated_or_out-of-order:':<27} {dups_reorder}" \
                    f" (do manual investigation)\n"
            output_line += f"{'Processed:'} {count} frames (pkts)\n\n"
            print(output_line)
        #sys.stdout.close() ???

    params = Params()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for i in range(len(params.infile)):
            infile = params.infile[i]
            outfile = params.outfile[i] if params.write_file else None
            executor.submit(parse_pcap,
                            opt_data_format=params.data_format,
                            opt_infile=infile,
                            opt_outfile=outfile,
                            opt_write_file=params.write_file,
                            opt_count=params.count,
                            opt_time_perf=params.time_perf,
                            opt_print=params.print,
                            opt_time_delta=params.time_delta,
                            opt_seq_analysis=params.seq_analysis)

    end = time.perf_counter()
    print(f"Elapsed: {end - start:.1f} s")


if __name__ == '__main__':
    main()
